<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recipes on Arco Research &amp; Documentation</title>
    <link>https://arcogroup.bitbucket.io/recipes/</link>
    <description>Recent content in Recipes on Arco Research &amp; Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2020 09:49:09 +0100</lastBuildDate><atom:link href="https://arcogroup.bitbucket.io/recipes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amazfit 2 Dynamic Core: Integration with Python</title>
      <link>https://arcogroup.bitbucket.io/recipes/amazfit_2_integration_with_python/</link>
      <pubDate>Tue, 28 Jan 2020 09:49:09 +0100</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/amazfit_2_integration_with_python/</guid>
      <description>Overview Under the Amazit branch name, there are a lot of devices. Among them, Xiaomi sells &amp;lsquo;smart&amp;rsquo; shoes (or sneakers) that have a device inside which measures some variables and also counts the steps. The device could be purchased alone, and is known as Amazfit 2 Smart Chip or Dynamic Core. In this recipe, we will use a Python library to connect to that device, and acquire the provided information.</description>
    </item>
    
    <item>
      <title>Cómo crear snapshots de vagrant</title>
      <link>https://arcogroup.bitbucket.io/recipes/creating_vagrant_snapshots/</link>
      <pubDate>Fri, 23 Aug 2019 07:52:05 +0200</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/creating_vagrant_snapshots/</guid>
      <description>Ingredientes Esta receta está pensada para ser usada con un demostrador o servicio que está virtualizado usando Vagrant. Partiremos asumiendo que el servicio está correctamente desplegado y funcionando.
Crear el box de vagrant Para crear el box, solo es necesario ejecutar el siguiente comando:
console $ vagrant package --output my-application.box  Esto generará un fichero con el nombre indicado, que podrá ser usado para crear nuevas instancias de este Vagrant. El fichero contiene el sistema entero tal y como esta en este momento, por lo que quizá ocupe más de 1 GiB (dependiendo del contenido de la VM).</description>
    </item>
    
    <item>
      <title>Building Packages with Ian</title>
      <link>https://arcogroup.bitbucket.io/recipes/building_packages_with_ian/</link>
      <pubDate>Mon, 13 May 2019 10:38:15 +0200</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/building_packages_with_ian/</guid>
      <description>Overview Ian is a very useful tool that facilitates the task of builiding and uploading packages to a repository. Building packages in debian could be a very annoying task, thanks to Ian, you can build your package barely with a few commands.
Some of the mos relevant commandas that we are going to use are ian create, ian build and ian upload. In this recipe the focus will be put in how to build a package, at the end of the recipe a link you can find a link to a recipe that explain how tu upload a package to the arco repository.</description>
    </item>
    
    <item>
      <title>Programming IceC in X86</title>
      <link>https://arcogroup.bitbucket.io/recipes/programming_icec_in_x86/</link>
      <pubDate>Fri, 22 Mar 2019 13:08:00 +0100</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/programming_icec_in_x86/</guid>
      <description>Overview IceC is an object oriented communication middleware, written in C/C++, with a low use of the resources. This middleware is thought to small microcontrollers with limited resources, but is compatible with different architectures, in this example you are going to see how to program IceC in the architecture x86.
Ingredients In order to follow the next recipe you will need the following requirements:
 The icec and smart-transducer packages available at Pike&amp;rsquo;s repository.</description>
    </item>
    
    <item>
      <title>Make testing with Prego</title>
      <link>https://arcogroup.bitbucket.io/recipes/make_testing_with_prego/</link>
      <pubDate>Thu, 21 Mar 2019 09:39:16 +0100</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/make_testing_with_prego/</guid>
      <description>Overview Prego is a library consisting on a set of clases and hamcrest matchers usefull to specify shell command interactions through files, environment variables, network ports.
The main concept in prego is the Task(). A task is a set of assertions with three different checkers:
 task.assert_that, for single shot checking task.wait_that, for polling recurrent checking task.command, to run arbitrary shell command  A task also counts with two assertions asociated, runnning() and terminated(), which check if the task is working or has finished respectively.</description>
    </item>
    
    <item>
      <title>Smart Transducer: getting started</title>
      <link>https://arcogroup.bitbucket.io/recipes/st_getting_started/</link>
      <pubDate>Tue, 05 Mar 2019 16:20:02 +0100</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/st_getting_started/</guid>
      <description>Overview Smart-Transducer is a platform for building Smart Home solutions the easy way. It uses very simple interfaces, with a push model, to acquire sensor information and also to change the state of actuators. This recipe will analyze those interfaces and how to use them.
Ingredients In order to follow this recipe, you will need to satisfy the following requirements:
 The smart-transducer package, available at Pike&amp;rsquo;s repository. Python skills (search in python.</description>
    </item>
    
    <item>
      <title>Cómo imprimir un PCB con una máquina LPKF</title>
      <link>https://arcogroup.bitbucket.io/recipes/print_pcb_with_lpkf/</link>
      <pubDate>Fri, 01 Mar 2019 10:49:04 +0100</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/print_pcb_with_lpkf/</guid>
      <description>Introducción Las máquinas de prototipado para Printed Circuit Board (PCB), como las fabricadas por la empresa LPKF, permiten al usuario la impresión física de una placa previamente diseñada, siendo la solución predominante en la creación de prototipos. Estas máquinas imprimen el footprint de un diseño en una placa recubierta de cobre, creando los pads y aislando las pistas del resto del cobre.
Para realizar el proceso de impresión se debe hacer uso de las siguientes herramientas:</description>
    </item>
    
    <item>
      <title>Integrating Xiaomi Devices</title>
      <link>https://arcogroup.bitbucket.io/recipes/integrating_xiaomi_devices/</link>
      <pubDate>Wed, 20 Feb 2019 08:05:08 +0100</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/integrating_xiaomi_devices/</guid>
      <description>Overview Xiaomi (or Aqara or Mijia) has a family of products intended to be part of a Smart Home environment that everyone can install and use. They are beautiful and simple, but the associated cloud app sometimes does not fullfill our requirements (for instance, cloudless control).
Thus, here we present a Python library that you could use to interact with those devices, changing its state and receiving events from their sensors.</description>
    </item>
    
    <item>
      <title>Cómo crear documentación</title>
      <link>https://arcogroup.bitbucket.io/recipes/creating_arco_docs/</link>
      <pubDate>Mon, 18 Feb 2019 14:25:28 +0100</pubDate>
      
      <guid>https://arcogroup.bitbucket.io/recipes/creating_arco_docs/</guid>
      <description>Introducción La documentación del grupo Arco se genera mediante una herramienta de gestion de sitios estáticos, llamada Hugo, y se mantiene en una serie de repositorios. Para añadir o editar cualquier contenido, se ha de conocer esta estructura, y se deben utilizar las herramientas adecuadas.
El objetivo de esta receta es proporcionar una visión global, y algunos mecanismos para llevar a cabo la tarea de documentar. Si necesitas más información, puedes visitar la página de documentación de Hugo.</description>
    </item>
    
  </channel>
</rss>
