#!/usr/bin/python3
# -*- mode: python; coding: utf-8 -*-

import os
import sys
import pydoc
import inspect
from datetime import datetime
from argparse import ArgumentParser



class PythonAPIDoc:
    module_header = '# <span class="api-module">{}</span> API Documentation\n'
    class_header = '## Class <span class="api-class">{0}</span> {{#anchor-class-{0}}}'
    function_header = '### <span class="api-func">`{}`</span>'
    property_header = '### <span class="api-prop">`{}`</span>'

    def __init__(self, args):
        self.docs = []
        self.marker = 0

        self.get_front_matter(args)
        modules = self.load_modules(args)
        for mod in modules:
            self.get_markdown(mod)

    def __add__(self, doc):
        if doc is not None:
            self.docs.append(doc)
        return self

    def toc_add_class(self, name):
        self.docs.insert(self.marker, '* <a href="#anchor-class-{0}">{0}</a>'.format(name))
        self.marker += 1

    def get_front_matter(self, args):
        title = ", ".join(args.module) + " documentation"
        if args.title is not None:
            title = args.title

        self += "---"
        self += self.get_warn_comment(args)
        self += 'date: {}'.format(datetime.now().strftime("%Y-%m-%dT%H:%M:%S+01:00"))
        self += 'comment: "Documentation generated by Arco Docs Python API generator"'
        self += 'title: "{}"'.format(title)
        self += self.get_description(args)
        self += self.get_image(args)
        self += "---\n"

        self += "# {}\n".format(title)
        self += "## class index:"
        self.marker = len(self.docs)
        self += ""

    def get_warn_comment(self, args):
        msg = (
            "#\n"
            "# WARNING: this is a generated file, modifications will be DISCARDED!!\n#\n"
            "# used command:\n"
        )
        msg += "# {}\n".format(os.path.basename(sys.argv[0]))
        for key in vars(args):
            arg = key.replace("_", "-")
            value = getattr(args, key)
            if isinstance(value, list):
                value = " ".join('"{}"'.format(x) for x in value)
                msg += '#    {} \n'.format(value)
            else:
                value = '"{}"'.format(value)
                msg += '#    --{} {} \n'.format(arg, value)
        return msg + "#\n"

    def get_image(self, args):
        if args.image:
            return 'image: "{}"'.format(args.image)

    def get_description(self, args):
        if args.description:
            return 'description: "{}"'.format(args.description)

    def get_markdown(self, module):
        self.get_module_md(module)
        self.get_classes_md(module)

    def get_module_md(self, module):
        self += "<hr>\n"
        self += self.module_header.format(module.__name__)
        if module.__doc__:
            self += module.__doc__

    def get_classes_md(self, parent):
        for name, cls in inspect.getmembers(parent, inspect.isclass):
            # ignore private (starting with _) members
            if name.startswith("_"):
                continue

            # ignore undocummented members
            cdoc = pydoc.inspect.getdoc(cls)
            if cdoc is None:
                continue

            self += self.class_header.format(name)
            self += "\n" + cdoc

            self.toc_add_class(name)

            self.get_properties_md(cls)
            self.get_functions_md(cls)
            self.get_classes_md(cls)
            self += ""

    def get_properties_md(self, parent):
        for name, prop in inspect.getmembers(parent, lambda o: isinstance(o, property)):
            # ignore private (starting with _) members
            if name.startswith('_'):
                continue

            # ignore undocummented members
            pdoc = pydoc.inspect.getdoc(prop)
            if pdoc is None:
                continue

            self += "\n"
            self += self.property_header.format(name)
            self += pdoc

    def get_functions_md(self, parent):
        for name, func in inspect.getmembers(parent, inspect.isfunction):
            # ignore private (starting with _) members
            if name != '__init__' and name.startswith('_'):
                continue

            # ignore undocummented members
            fdoc = pydoc.inspect.getdoc(func)
            if fdoc is None or fdoc == "":
                continue

            self += "\n"
            self += self.function_header.format(name)
            self += '\n```py'
            self += 'def {}{}'.format(
                name, inspect.formatargspec(*inspect.getfullargspec(func))
            )
            self += '```\n'
            self += "<br>" + fdoc

    def load_modules(self, args):
        module_dir = os.getcwd()
        if args.module_dir is not None:
            module_dir = args.module_dir
        sys.path.insert(0, module_dir)

        modules = []
        for name in args.module:
            try:
                m = pydoc.safeimport(name)
                if m is None:
                    print("ERROR: module '{}' not found".format(name))
                    continue
                modules.append(m)

            except pydoc.ErrorDuringImport:
                print("ERROR: trying to import '{}'".format(name))

        return modules

    def __repr__(self):
        return "\n".join(str(x) for x in self.docs)


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument(
        "-c", "--module-dir", help="search module on given directory")
    parser.add_argument(
        "--title", help="title to use on page front matter")
    parser.add_argument(
        "--image", help="image or icon to use on summaries")
    parser.add_argument(
        "--description", help="descriptive text of this library, to use on summaries")
    parser.add_argument(
        "module", nargs="*", help="module name")

    args = parser.parse_args()
    doc = PythonAPIDoc(args)

    print(doc)
